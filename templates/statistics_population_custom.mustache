Type de données : <select id="report-builder-select" class="custom-select">
  <option value="1" selected>{{# str }} statistics_population_datatype_1, local_apsolu {{/ str }}</option>
  <option value="2">{{# str }} statistics_population_datatype_2, local_apsolu {{/ str }}</option>
  <option value="3">{{# str }} statistics_population_datatype_3, local_apsolu {{/ str }}</option>
  <option value="4">{{# str }} statistics_population_datatype_4, local_apsolu {{/ str }}</option>
</select>
  
<div id="querybuilder" style="display:block"></div>
<div class="btn-group">
  <button class="btn btn-primary reset">{{# str }} statistics_clean, local_apsolu {{/ str }}</button>
  <button class="btn btn-primary parse-sql">{{# str }} statistics_apply, local_apsolu {{/ str }}</button>
</div>

<div class="report-builder-datatable" style="padding-top:20px;">
  <table class="display compact report-builder-table" width="100%"></table>
</div>

{{#js}}
require([
  'jquery',
  'core/notification',   
  "core/ajax",
  'local_apsolu/query-builder',
  'local_apsolu/query-builder.fr',
  "local_apsolu/datatables.net",
  "local_apsolu/datatables.net-buttons",
  "local_apsolu/datatables.net-bs4",
  "buttons.bootstrap4",
  "buttons.html5",
  "buttons.colVis",
  ], function($,notification,Ajax) {
  
  var selector = '.report-builder-table';
  
  var builder = $('#querybuilder').queryBuilder({
    filters: {{{Filters}}},
    lang_code: '{{{langcode}}}', 
  });
  
  $('.reset').on('click', function() {
    builder.queryBuilder('reset');
    
    // Destroy results table        
    if ( $.fn.dataTable.isDataTable( selector ) ) {
      table = $(selector).DataTable();
      table.destroy();
      $(selector).empty(); 
    }  
  });                   
  
  // Datatype selection
  $("#report-builder-select").change(function() {
    builder.queryBuilder('destroy');

    builder = $('#querybuilder').queryBuilder({
      filters: {{{Filters}}},
      lang_code: '{{{langcode}}}',
    });

  });
  
        
  $('.parse-sql').on('click', function() {
    var requests = [];
    var customQuery = builder.queryBuilder('getSQL', 'question_mark');
    
    // Destroy results table        
    if ( $.fn.dataTable.isDataTable( selector ) ) {
      table = $(selector).DataTable();
      table.destroy();
      $(selector).empty(); 
    } 
                           
    if (customQuery !== null && customQuery.sql.length) {
        customQuery.datatype = $("#report-builder-select").val();

        // Get enrols data
        var requests = Ajax.call([{
                methodname: 'local_apsolu_get_reportdataset',
                args: {'classname':'population','querybuilder':JSON.stringify(customQuery)}
              }]);
              
        requests[0].done(function(enrols) {
          // Get ordering
          var json_order = JSON.parse(enrols.orders);
          var order = [];
          for(var i in json_order)
              order.push([i, json_order[i]]);
              
          // Build results table
          var options = {
            data : JSON.parse(enrols.data),
            columns: JSON.parse(enrols.columns),
            order: order,
            buttons: ['csvHtml5'],
            dom: '<"top"Bfi>rt<"bottom"lp><"clear">', //'dom': 'lfrtip',
            pageLength:30,
            language: {
                      "sEmptyTable":     "Aucune donnée disponible dans le tableau",
                      "sInfo":           "Affichage de l'élément _START_ à _END_ sur _TOTAL_ éléments",
                      "sInfoEmpty":      "Affichage de l'élément 0 à 0 sur 0 élément",
                      "sInfoFiltered":   "(filtré à partir de _MAX_ éléments au total)",
                      "sInfoPostFix":    "",
                      "sInfoThousands":  ",",
                      "sLengthMenu":     "Afficher _MENU_ éléments",
                      "sLoadingRecords": "Chargement...",
                      "sProcessing":     "Traitement...",
                      "sSearch":         "Rechercher :",
                      "sZeroRecords":    "Aucun élément correspondant trouvé",
                      "oPaginate": {
                          "sFirst":    "Premier",
                          "sLast":     "Dernier",
                          "sNext":     "Suivant",
                          "sPrevious": "Précédent"
                      },
                      "oAria": {
                          "sSortAscending":  ": activer pour trier la colonne par ordre croissant",
                          "sSortDescending": ": activer pour trier la colonne par ordre décroissant"
                      },
                      "select": {
                              "rows": {
                                  "_": "%d lignes sélectionnées",
                                  "0": "Aucune ligne sélectionnée",
                                  "1": "1 ligne sélectionnée"
                              } 
                      }              
                    },            
            initComplete: function(settings, json) {
                      
              // Build columns filters
              if (enrols.filters) {
                var filters = JSON.parse(enrols.filters);
                
                $(selector+' thead tr').clone(false).appendTo( selector+' thead' );
                $(selector+' thead tr:eq(1) th').removeAttr('class').html('');
                
                if (filters.input) {
                  this.api().columns(filters.input).every( function () {
                    var column = this;
                    if (column.visible()) {
                      
                      var title = $(column.header()).html();
                      var input = $('<input type="text" class="column_search" placeholder=" '+title+'" />')
                          .appendTo( $(selector+' thead tr:eq(1) th').eq(column.index()).empty() )
                          .on( 'keyup change', function () {
                              var val = $.fn.dataTable.util.escapeRegex(
                                  $(this).val()
                              );
                              column
                                      .search(val)
                                      .draw();
                          } );
                    }
                  });
                }
                if (filters.select) {
                  this.api().columns(filters.select).every( function () {
                    var column = this;
                    if (column.visible()) {
                      var select = $('<select><option value=""></option></select>')
                          .appendTo( $(selector+' thead tr:eq(1) th').eq(column.index()).empty() )
                          .on( 'change', function () {
                              var val = $.fn.dataTable.util.escapeRegex(
                                  $(this).val()
                              );
       
                              column
                                  .search( val ? '^'+val+'$' : '', true, false )
                                  .draw();
                          } );
       
                      column.data().unique().sort().each( function ( d, j ) {
                          select.append( '<option value="'+d+'">'+d+'</option>' )
                      });
                    }
                  });
                }
              }
              
            },
            
            
          };
                  
          var table = $(selector).DataTable(options);
          table.unique(); // Remove doublons
          
          
        }).fail(notification.exception);              

    }
    
  });
  
});
{{/js}}