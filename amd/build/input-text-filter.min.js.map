{"version":3,"file":"input-text-filter.min.js","sources":["../src/input-text-filter.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/* jshint esversion: 6 */\n\n/**\n * Initialise un filtre de recherche sur un élément.\n *\n * @module     local_apsolu/input-text-filter\n * @copyright  2021 Université Rennes 2 <dsi-contact@univ-rennes2.fr>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([], function() {\n    return {\n        /**\n         * Initialise un filtre de recherche sur un élément.\n         *\n         * - positionne un évènement 'keyup' sur un élément 'input' (identifié par inputSelector)\n         * - affiche ou masque les éléments (identifié par targetSelector) en fonction du texte saisie dans l'élément 'input'\n         *\n         * @param {String} inputSelector QuerySelector de l'élément contenant le texte à filtrer/rechercher.\n         * @param {String} targetSelector QuerySelector des éléments devant être comparés avec le filtre de recherche.\n         * @param {String} closestSelector Détermine sur quel élément le style doit s'appliquer.\n         *  Si ce n'est pas précisé, le style sera appliqué directement sur les éléments targetSelector.\n         * @param {String} displayStyle Détermine le style d'affichage à appliquer.\n         *  Par défaut, c'est le style 'block' qui est appliqué.\n         *\n         * @returns {void}\n         */\n        initialise: function(inputSelector, targetSelector, closestSelector = '', displayStyle = 'block') {\n            // Vérifie l'existence de l'élément inputSelector.\n            var element = document.querySelector(inputSelector);\n            if (element === null) {\n                return;\n            }\n\n            // Positionne un évènement 'keyup' sur l'élément inputSelector.\n            element.addEventListener('keyup', function() {\n                // Récupère tous les éléments cibles (identifié par targetSelector).\n                let elements = document.querySelectorAll(targetSelector);\n\n                // Récupère le texte recherché.\n                let searchString = document.querySelector(inputSelector).value.trim().toLowerCase();\n\n                let parentNode;\n                let style;\n\n                for (let i = 0; i < elements.length; i++) {\n                    // Si le champ de recherche inputSelector est vide ou que le texte recherché correspond à l'élement parcouru.\n                    if (searchString == '' || elements[i].textContent.trim().toLowerCase().includes(searchString)) {\n                        style = displayStyle;\n                    } else {\n                        style = 'none';\n                    }\n\n                    // Remonte à l'élément parent pour masquer le bloc complet.\n                    if (closestSelector != '') {\n                        parentNode = elements[i].closest(closestSelector);\n                        if (parentNode === null) {\n                            continue;\n                        }\n                    } else {\n                        parentNode = elements[i];\n                    }\n\n                    // Applique le style à l'élément.\n                    parentNode.style.display = style;\n                }\n            });\n        }\n    };\n});\n"],"names":["define","initialise","inputSelector","targetSelector","closestSelector","displayStyle","element","document","querySelector","addEventListener","parentNode","style","elements","querySelectorAll","searchString","value","trim","toLowerCase","i","length","textContent","includes","closest","display"],"mappings":";;;;;;;AAwBAA,wCAAO,IAAI,iBACA,CAgBHC,WAAY,SAASC,cAAeC,oBAAgBC,uEAAkB,GAAIC,oEAAe,YAEjFC,QAAUC,SAASC,cAAcN,eACrB,OAAZI,SAKJA,QAAQG,iBAAiB,SAAS,eAO1BC,WACAC,MANAC,SAAWL,SAASM,iBAAiBV,gBAGrCW,aAAeP,SAASC,cAAcN,eAAea,MAAMC,OAAOC,kBAKjE,IAAIC,EAAI,EAAGA,EAAIN,SAASO,OAAQD,IAAK,IAGlCP,MADgB,IAAhBG,cAAsBF,SAASM,GAAGE,YAAYJ,OAAOC,cAAcI,SAASP,cACpET,aAEA,OAIW,IAAnBD,oBACAM,WAAaE,SAASM,GAAGI,QAAQlB,iBACd,OAAfM,yBAIJA,WAAaE,SAASM,GAI1BR,WAAWC,MAAMY,QAAUZ"}